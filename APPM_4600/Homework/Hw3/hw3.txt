# import libraries
import numpy as np
import matplotlib.pyplot as plt


def driver():
    # Question 1 =====================================================================
    f = lambda x: 2*x-np.sin(x) - 1
    a = 0
    b = np.pi

    tol = 1e-8

    [astar, ier] = bisection(f, a, b, tol)
    print('the approximate root is', astar)
    print('the error message reads:', ier)
    print('f(astar) =', f(astar))

    # Question 2 =====================================================================
    f = lambda x: (x-5)**9
    a = 4.82
    b = 5.2
    tol = 1e-4

    print("PROBLEM 2a ==========================================")
    [astar, ier] = bisection(f, a, b, tol)
    print('the approximate root is', astar)
    print('f(astar) =', f(astar))

    f = lambda x: (x**9 - 45*x**8 + 900*x**7 - 10500*x**6 +
            78750*x**5 - 393750*x**4 + 1312500*x**3 -
            2812500*x**2 + 3515625*x - 1953125)

    print("PROBLEM 2b ==========================================")
    [astar, ier] = bisection(f, a, b, tol)
    print('the approximate root is', astar)
    print('f(astar) =', f(astar))

    # Question 3 =====================================================================
    f = lambda x: x**3 + x - 4
    a = 1
    b = 4
    tol = 1e-3

    print("PROBLEM 3  ==========================================")
    [astar, ier] = bisection(f, a, b, tol)
    print('the approximate root is', astar)
    print('f(astar) =', f(astar))

    # Question 4 =====================================================================

    # Question 5  =====================================================================
    x = np.linspace(-5,10,100)
    y = x - 4*np.sin(2*x)-3
    yaxis = np.zeros((100,1))

    plt.figure()
    plt.plot(x,yaxis)
    plt.plot(x,y)
    plt.xlabel('x')
    plt.ylabel('y')
    plt.grid()

# Finding the roots of the equation x-4sin(2x)-3=0 [BRUTE FORCE METHOD]

# Define g(x), where g(x) = x in FPM
def g(x):
    return -np.sin(2*x) + 5*x/4 - 3/4

# Define the fixed point algorithm (from lab example)
def fixedpt(f, x0, tol, Nmax):
    # REMOVED IER, P RETURN FOR DEBUGGING
    count = 0
    p=[]
    while (count < Nmax):
        p.append(float(x0))
        count = count + 1
        x1 = f(x0)
        if (abs(x1 - x0) < tol):
            xstar = x1
            ier = 0

            return xstar,ier
        x0 = x1

    xstar = x1
    ier = 1
    return xstar,ier

# Since the number of roots is known, set a limit on desired roots
Nroots = 7
roots = np.zeros((1,Nroots))

# Input parameters to the fixed point method
tol = 1e-10
tries = 1000 # Number of possible points in [a,b] to try
Nmax = 100

# Bounds for guesses
a = -5
b = 10

x0 = np.linspace(a,b,tries)
indeces = np.linspace(0,tries - 1, tries)

sols = []

for i in indeces:
    xstar,bools = fixedpt(g,x0[int(i)],tol,Nmax)
    
    if bools == 0:
        sols.append(xstar)


sols = np.unique(np.round(sols, decimals=9))

print("roots = ", sols)


# define routines
def bisection(f, a, b, tol):

    fa = f(a)
    fb = f(b);

    if (fa * fb > 0):
        ier = 1
        astar = a

        return [astar, ier]

    #   verify end points are not a root
    if (fa == 0):
        astar = a
        ier = 0

        return [astar, ier]

    if (fb == 0):
        astar = b
        ier = 0

        return [astar, ier]

    count = 0
    d = 0.5 * (a + b)
    while (abs(d - a) > tol):
        fd = f(d)
        print("d = ",d,", n = ", count)
        if (fd == 0):
            astar = d
            ier = 0
            print(astar)
            return [astar, ier]
        if (fa * fd < 0):
            b = d
        else:
            a = d
            fa = fd
        d = 0.5 * (a + b)
        count = count + 1
    #      print('abs(d-a) = ', abs(d-a))

    astar = d

    ier = 0

    return [astar, ier]


driver()

###################################################################################################

# Finding the roots of the equation x-4sin(2x)-3=0 [BRUTE FORCE METHOD]

# Define g(x), where g(x) = x in FPM
def g(x):
    return (4*np.sin(2*x)-3)

# Define the fixed point algorithm (from lab example)
def fixedpt(f, x0, tol, Nmax):
    # REMOVED IER, P RETURN FOR DEBUGGING
    count = 0
    p=[]
    while (count < Nmax):
        p.append(float(x0))
        count = count + 1
        x1 = f(x0)
        if (abs(x1 - x0) < tol):
            xstar = x1
            ier = 0

            return xstar
        x0 = x1

    xstar = x1
    ier = 1
    return xstar

# Since the number of roots is known, set a limit on desired roots
Nroots = 7
roots = np.zeros((1,Nroots))

# Input parameters to the fixed point method
tol = 1e-10
tries = 1000 # Number of possible points in [a,b] to try
Nmax = 100

# Bounds for guesses
a = -1
b = 8

x0 = -0.6

xstar = fixedpt(g,x0,tol,Nmax)
print(xstar)